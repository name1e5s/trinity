package trinity.core.decode.isa

import chisel3.util._
import trinity.core.execute.fn.{AluOp, BruOp, LsuOp, FnType}
import trinity.util.Converters._

class Rv64ITable extends InstructionTable {
  // alu instructions
  def ADDI = BitPat("b????????????_?????_000_?????_0010011")
  def SLLI = BitPat("b000000??????_?????_001_?????_0010011")
  def SLTI = BitPat("b????????????_?????_010_?????_0010011")
  def SLTIU = BitPat("b????????????_?????_011_?????_0010011")
  def XORI = BitPat("b????????????_?????_100_?????_0010011")
  def SRLI = BitPat("b000000??????_?????_101_?????_0010011")
  def ORI = BitPat("b????????????_?????_110_?????_0010011")
  def ANDI = BitPat("b????????????_?????_111_?????_0010011")
  def SRAI = BitPat("b010000??????_?????_101_?????_0010011")

  def ADD = BitPat("b0000000_?????_?????_000_?????_0110011")
  def SLL = BitPat("b0000000_?????_?????_001_?????_0110011")
  def SLT = BitPat("b0000000_?????_?????_010_?????_0110011")
  def SLTU = BitPat("b0000000_?????_?????_011_?????_0110011")
  def XOR = BitPat("b0000000_?????_?????_100_?????_0110011")
  def SRL = BitPat("b0000000_?????_?????_101_?????_0110011")
  def OR = BitPat("b0000000_?????_?????_110_?????_0110011")
  def AND = BitPat("b0000000_?????_?????_111_?????_0110011")
  def SUB = BitPat("b0100000_?????_?????_000_?????_0110011")
  def SRA = BitPat("b0100000_?????_?????_101_?????_0110011")

  def AUIPC = BitPat("b????????????????????_?????_0010111")
  def LUI = BitPat("b????????????????????_?????_0110111")

  // branch instructions
  def JAL = BitPat("b????????????????????_?????_1101111")
  def JALR = BitPat("b????????????_?????_000_?????_1100111")
  def BNE = BitPat("b???????_?????_?????_001_?????_1100011")
  def BEQ = BitPat("b???????_?????_?????_000_?????_1100011")
  def BLT = BitPat("b???????_?????_?????_100_?????_1100011")
  def BGE = BitPat("b???????_?????_?????_101_?????_1100011")
  def BLTU = BitPat("b???????_?????_?????_110_?????_1100011")
  def BGEU = BitPat("b???????_?????_?????_111_?????_1100011")

  // load/store
  def LB = BitPat("b????????????_?????_000_?????_0000011")
  def LH = BitPat("b????????????_?????_001_?????_0000011")
  def LW = BitPat("b????????????_?????_010_?????_0000011")
  def LBU = BitPat("b????????????_?????_100_?????_0000011")
  def LHU = BitPat("b????????????_?????_101_?????_0000011")
  def SB = BitPat("b???????_?????_?????_000_?????_0100011")
  def SH = BitPat("b???????_?????_?????_001_?????_0100011")
  def SW = BitPat("b???????_?????_?????_010_?????_0100011")

  // Rv 64
  def ADDIW = BitPat("b???????_?????_?????_000_?????_0011011")
  def SLLIW = BitPat("b0000000_?????_?????_001_?????_0011011")
  def SRLIW = BitPat("b0000000_?????_?????_101_?????_0011011")
  def SRAIW = BitPat("b0100000_?????_?????_101_?????_0011011")
  def SLLW = BitPat("b0000000_?????_?????_001_?????_0111011")

  def SRLW = BitPat("b0000000_?????_?????_101_?????_0111011")
  def SRAW = BitPat("b0100000_?????_?????_101_?????_0111011")
  def ADDW = BitPat("b0000000_?????_?????_000_?????_0111011")
  def SUBW = BitPat("b0100000_?????_?????_000_?????_0111011")
  def LWU = BitPat("b???????_?????_?????_110_?????_0000011")
  def LD = BitPat("b???????_?????_?????_011_?????_0000011")
  def SD = BitPat("b???????_?????_?????_011_?????_0100011")

  override val table: List[(BitPat, List[BitPat])] = List(
    ADDI -> List(InstType.I, FnType.ALU, AluOp.ADD),
    SLLI -> List(InstType.I, FnType.ALU, AluOp.SLL),
    SLTI -> List(InstType.I, FnType.ALU, AluOp.SLT),
    SLTIU -> List(InstType.I, FnType.ALU, AluOp.SLTU),
    XORI -> List(InstType.I, FnType.ALU, AluOp.XOR),
    SRLI -> List(InstType.I, FnType.ALU, AluOp.SRL),
    ORI -> List(InstType.I, FnType.ALU, AluOp.OR),
    ANDI -> List(InstType.I, FnType.ALU, AluOp.AND),
    SRAI -> List(InstType.I, FnType.ALU, AluOp.SRA),
    ADD -> List(InstType.R, FnType.ALU, AluOp.ADD),
    SUB -> List(InstType.R, FnType.ALU, AluOp.SUB),
    SLL -> List(InstType.R, FnType.ALU, AluOp.SLL),
    SLT -> List(InstType.R, FnType.ALU, AluOp.SLT),
    SLTU -> List(InstType.R, FnType.ALU, AluOp.SLTU),
    XOR -> List(InstType.R, FnType.ALU, AluOp.XOR),
    SRL -> List(InstType.R, FnType.ALU, AluOp.SRL),
    OR -> List(InstType.R, FnType.ALU, AluOp.OR),
    AND -> List(InstType.R, FnType.ALU, AluOp.AND),
    SRA -> List(InstType.R, FnType.ALU, AluOp.SRA),
    AUIPC -> List(InstType.U, FnType.ALU, AluOp.ADD),
    LUI -> List(InstType.U, FnType.ALU, AluOp.LUI),
    JAL -> List(InstType.J, FnType.BRU, BruOp.J),
    JALR -> List(InstType.I, FnType.BRU, BruOp.JR),
    BEQ -> List(InstType.B, FnType.BRU, BruOp.EQ),
    BNE -> List(InstType.B, FnType.BRU, BruOp.NE),
    BLT -> List(InstType.B, FnType.BRU, BruOp.LT),
    BGE -> List(InstType.B, FnType.BRU, BruOp.GE),
    BLTU -> List(InstType.B, FnType.BRU, BruOp.LTU),
    BGEU -> List(InstType.B, FnType.BRU, BruOp.GEU),
    LB -> List(InstType.I, FnType.LSU, LsuOp.LB),
    LH -> List(InstType.I, FnType.LSU, LsuOp.LH),
    LW -> List(InstType.I, FnType.LSU, LsuOp.LW),
    LBU -> List(InstType.I, FnType.LSU, LsuOp.LBU),
    LHU -> List(InstType.I, FnType.LSU, LsuOp.LHU),
    SB -> List(InstType.S, FnType.LSU, LsuOp.SB),
    SH -> List(InstType.S, FnType.LSU, LsuOp.SH),
    SW -> List(InstType.S, FnType.LSU, LsuOp.SW),
    ADDIW -> List(InstType.I, FnType.ALU, AluOp.ADDW),
    SLLIW -> List(InstType.I, FnType.ALU, AluOp.SLLW),
    SRLIW -> List(InstType.I, FnType.ALU, AluOp.SRLW),
    SRAIW -> List(InstType.I, FnType.ALU, AluOp.SRAW),
    ADDW -> List(InstType.R, FnType.ALU, AluOp.ADDW),
    SUBW -> List(InstType.R, FnType.ALU, AluOp.SUBW),
    SLLW -> List(InstType.R, FnType.ALU, AluOp.SLLW),
    SRLW -> List(InstType.R, FnType.ALU, AluOp.SRLW),
    SRAW -> List(InstType.R, FnType.ALU, AluOp.SRAW),
    LWU -> List(InstType.I, FnType.LSU, LsuOp.LWU),
    LD -> List(InstType.I, FnType.LSU, LsuOp.LD),
    SD -> List(InstType.S, FnType.LSU, LsuOp.SD)
  )
}
